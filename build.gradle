buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE"
    }
}

apply plugin: "io.spring.dependency-management"
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'maven'

def CLASS_ACTIVATOR = 'com.beolnix.marvin.im.plugin.Activator'
def CLASS_PLUGIN = 'com.beolnix.marvin.im.plugin.StatisticsIMPlugin'
def BUNDLE_NAME = 'Marvin statistics service integration plugin'
def BUNDLE_DESC = 'Sends statistics to the statistics web-service for the further processing'
def VENDOR = 'com.beolnix'

def JDK_VERSION = '1.8'
def MARVIN_API_VERSION = '0.3-SNAPSHOT'
def MARVIN_UTILS_VERSION = '0.3-SNAPSHOT'
def LOG4J_VERSION = '1.2.16'
def GROOVY_VERSION = '2.4.4'
def JUNIT_VERSION = '4.12'
def XML_APIS_VERSION = '1.3.04'
def FEIGN_VER = '6.1.2'

sourceCompatibility = JDK_VERSION
targetCompatibility = JDK_VERSION
System.setProperty("file.encoding", "UTF-8")

project.group = 'com.beolnix.marvin'
project.version = '0.1-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "http://nexus.beolnix.com/content/repositories/releases/"
    }
    maven {
        url "http://nexus.beolnix.com/content/repositories/snapshots/"
    }
}

configurations {
    runtime.exclude group: "org.slf4j", module: "slf4j-log4j12"
    all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
    all*.exclude group: '', module: 'servlet-api'
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.0.4.RELEASE'
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (version.toString().endsWith("SNAPSHOT")) {
                repository(url: "http://nexus.beolnix.com/content/repositories/snapshots/") {
                    authentication(userName: System.getenv()['REPO_USER'], password: System.getenv()['REPO_SNAPSHOT_PASSWORD'])
                }
            } else {
                repository(url: "http://nexus.beolnix.com/content/repositories/releases/") {
                    authentication(userName: System.getenv()['REPO_USER'], password: System.getenv()['REPO_RELEASE_PASSWORD'])
                }
            }
            pom.version = version
            pom.artifactId = "marvin-statistics-plugin"
            pom.groupId = "com.beolnix.marvin"
        }
    }
}

configurations { provided }

sourceSets {
    main { compileClasspath += configurations.provided }
}


dependencies {
    compile 'com.beolnix.marvin:statistics-api:0.1.2'

    compile group: 'com.beolnix.marvin', name: 'marvin-api', version: MARVIN_API_VERSION, changing: true
    compile group: 'com.beolnix.marvin', name: 'marvin-plugin-utils', version: MARVIN_UTILS_VERSION, changing: true
    compile "org.apache.felix:org.apache.felix.framework:4.0.1"

    compile 'org.springframework:spring-core'
    compile 'org.springframework:spring-context'
    compile 'org.springframework:spring-beans'
    compile "org.springframework.cloud:spring-cloud-starter-feign"
    compile 'com.netflix.feign:feign-jackson:6.1.2'
    compile 'com.fasterxml.jackson.core:jackson-core'
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.4.0")
    compile 'org.springframework.cloud:spring-cloud-starter-ribbon'
    compile 'org.springframework.boot:spring-boot-starter-security'

    compile "org.codehaus.groovy:groovy-all:${GROOVY_VERSION}"
    compile "xml-apis:xml-apis:${XML_APIS_VERSION}"

    compile 'log4j:log4j'
    compile 'org.slf4j:slf4j-log4j12'
    compile 'org.slf4j:slf4j-api'

    testCompile "junit:junit:${JUNIT_VERSION}"
    testCompile 'com.github.tomakehurst:wiremock:1.57'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.mockito:mockito-all:1.10.19'
}

jar {
    def cp = '.'
    configurations.runtime.resolve().flatten() { File file
        -> file.name
    }.unique().each { aJar ->  cp = cp + ",${aJar}" }

    manifest {
        attributes 'Bundle-Name': BUNDLE_NAME,
                'Bundle-SymbolicName': BUNDLE_NAME,
                'Bundle-Description': BUNDLE_DESC,
                'Bundle-Vendor': VENDOR,
                'Bundle-Version': project.version.toString().replace("-SNAPSHOT", ""),
                'Bundle-Activator': CLASS_ACTIVATOR,
                'Export-Package': CLASS_PLUGIN,
                'Import-Package': 'org.osgi.framework,com.beolnix.marvin.im.api,com.beolnix.marvin.im.api.model,com.beolnix.marvin.im.api.error,com.beolnix.marvin.plugins.api,com.beolnix.marvin.plugins.api.error,com.beolnix.marvin.config.api,com.beolnix.marvin.config.api.model,com.beolnix.marvin.config.api.error',
                'Bundle-ClassPath': cp
    }

    // workaround package scan in osgi bundle
    from(configurations.compile.filter{ (it.name.startsWith("statistics-api")
            || it.name.startsWith("ribbon")
            || it.name.startsWith("spring"))}.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    from configurations.runtime
//            .filter{(!it.name.startsWith("statistics-api")
//            || !it.name.startsWith("ribbon")
//            || !it.name.startsWith("spring"))}
}


